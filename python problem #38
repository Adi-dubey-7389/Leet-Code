# Find the Punishment Number of an Integer
"""
Given a positive integer n, return the punishment number of n.

The punishment number of n is defined as the sum of the squares of all integers i such that:

1 <= i <= n
The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.
"""

class Solution:
    def punishmentNumber(self, n: int) -> int:
        def can_partition(num_str: str, target: int) -> bool:
            def backtrack(index: int, current_sum: int) -> bool:
                if index == len(num_str):
                    return current_sum == target
                for j in range(index + 1, len(num_str) + 1):
                    part = int(num_str[index:j])
                    if backtrack(j, current_sum + part):
                        return True
                return False
            
            return backtrack(0, 0)
        
        total = 0
        for i in range(1, n + 1):
            square_str = str(i * i)
            if can_partition(square_str, i):
                total += i * i
        return total

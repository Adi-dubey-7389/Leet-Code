# Shortest Common Supersequence
"""
Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.
"""

class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        # Step 1: Find the LCS table
        m, n = len(str1), len(str2)
        dp = [[""] * (n + 1) for _ in range(m + 1)]

        for i in range(m):
            for j in range(n):
                if str1[i] == str2[j]:
                    dp[i + 1][j + 1] = dp[i][j] + str1[i]
                else:
                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j], key=len)

        # Step 2: Use LCS to build the shortest supersequence
        lcs = dp[m][n]
        i = j = 0
        result = []

        for c in lcs:
            # Add characters from str1 before this LCS character
            while str1[i] != c:
                result.append(str1[i])
                i += 1
            # Add characters from str2 before this LCS character
            while str2[j] != c:
                result.append(str2[j])
                j += 1
            # Add the common character
            result.append(c)
            i += 1
            j += 1

        # Add any remaining characters
        result.append(str1[i:])
        result.append(str2[j:])
        
        return ''.join(result)

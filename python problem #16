# Subsets II
"""
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.
"""

from typing import List

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()  # Sort to group duplicates

        def backtrack(start, path):
            res.append(path[:])
            for i in range(start, len(nums)):
                # Skip duplicates
                if i > start and nums[i] == nums[i - 1]:
                    continue
                path.append(nums[i])
                backtrack(i + 1, path)
                path.pop()

        backtrack(0, [])
        return res

# -------------------------------
# Sample test
if __name__ == "__main__":
    nums = [1, 2, 2]
    solution = Solution()
    result = solution.subsetsWithDup(nums)
    for subset in result:
        print(subset)

#Remove Duplicates from Sorted List II
"""
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.
"""

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        dummy = ListNode(0, head)
        prev = dummy

        while head:
            if head.next and head.val == head.next.val:
                val = head.val
                while head and head.val == val:
                    head = head.next
                prev.next = head
            else:
                prev = prev.next
                head = head.next

        return dummy.next

# Example usage (can be used for testing in local environment)
def create_linked_list(arr):
    dummy = ListNode()
    current = dummy
    for num in arr:
        current.next = ListNode(num)
        current = current.next
    return dummy.next

def print_linked_list(head):
    while head:
        print(head.val, end=' -> ' if head.next else '\n')
        head = head.next

# Sample test
if __name__ == "__main__":
    arr = [1, 2, 3, 3, 4, 4, 5]
    head = create_linked_list(arr)
    solution = Solution()
    new_head = solution.deleteDuplicates(head)
    print_linked_list(new_head)

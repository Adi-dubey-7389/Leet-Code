#  Partition List
"""
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.
"""

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def partition(self, head: ListNode, x: int) -> ListNode:
        before_head = ListNode(0)
        after_head = ListNode(0)

        before = before_head
        after = after_head

        while head:
            if head.val < x:
                before.next = head
                before = before.next
            else:
                after.next = head
                after = after.next
            head = head.next

        after.next = None
        before.next = after_head.next

        return before_head.next

# -------------------------------
# Helper functions for testing:
def create_linked_list(arr):
    dummy = ListNode()
    current = dummy
    for val in arr:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

def print_linked_list(head):
    while head:
        print(head.val, end=' -> ' if head.next else '\n')
        head = head.next

# Sample test:
if __name__ == "__main__":
    arr = [1, 4, 3, 2, 5, 2]
    x = 3
    head = create_linked_list(arr)
    solution = Solution()
    new_head = solution.partition(head, x)
    print_linked_list(new_head)

#  Reverse Linked List II
"""
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
"""

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        if not head or left == right:
            return head

        dummy = ListNode(0)
        dummy.next = head
        prev = dummy

        # Step 1: Reach node before 'left'
        for _ in range(left - 1):
            prev = prev.next

        # Step 2: Reverse sublist between left and right
        curr = prev.next
        for _ in range(right - left):
            temp = curr.next
            curr.next = temp.next
            temp.next = prev.next
            prev.next = temp

        return dummy.next

# -------------------------------
# Helper Functions for Testing
def list_to_linkedlist(arr):
    dummy = ListNode(0)
    curr = dummy
    for num in arr:
        curr.next = ListNode(num)
        curr = curr.next
    return dummy.next

def linkedlist_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

# -------------------------------
# Example Usage
if __name__ == "__main__":
    head = list_to_linkedlist([1, 2, 3, 4, 5])
    left = 2
    right = 4
    solution = Solution()
    new_head = solution.reverseBetween(head, left, right)
    print(linkedlist_to_list(new_head))  # Output: [1, 4, 3, 2, 5]
